```markdown
# Simple Socket Server Demo (cross-origin friendly)

What this does
- A Node.js server (Express + socket.io) that stores a single string in memory.
- public/set.html: a page to set the string (sends via socket.io and posts to /value).
- public/get.html: a page that displays the stored string, receives real-time updates via socket.io, and polls /value every 10 seconds as a fallback.
- The server is configured (in-code) to allow cross-origin requests from anywhere by default (ALLOW_ALL_ORIGINS=true). Edit server.js SETTINGS if you want to restrict origins.

Files
- package.json
- server.js
- public/set.html
- public/get.html

Run locally for testing
1. npm install
2. Edit public/set.html and public/get.html: set SERVER_ORIGIN to your server's origin (e.g., http://192.168.1.50:3000 or http://localhost:3000).
3. Start the server:
   node server.js
4. Host the pages anywhere (they can be served from any machine). Open set.html and get.html in different browsers/machines and ensure SERVER_ORIGIN points to the running server.
5. If testing from other machines on your LAN, ensure your firewall/router allows inbound connections to the server host:PORT and that server.js binds to 0.0.0.0 (it does by default here).

Notes
- ALLOW_ALL_ORIGINS = true is convenient for testing but not recommended for public production deployments.
- For production, set ALLOW_ALL_ORIGINS = false and populate ALLOWED_ORIGINS with the exact origins you want to allow.
- If you require authentication, prefer token-based auth (e.g., JWT). For cookie-based auth cross-origin, you must use credentials with SameSite=None; Secure and return explicit origins in CORS.
- The stored string is in-memory only; restarting the server resets it.
```